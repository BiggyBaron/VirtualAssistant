import math
import operator
import random
import sys
import time
import datetime

prefList = {"energy": 0, "entertainment": 1, "food": 2, "health": 3, "security": 4, "work": 5}
usersList = {"adult": 0.3, "young": 0.9, "elder": 0.6}


def loadDataset(split, trainingSet=[], testSet=[]):
    cases = [[0.6, 0, 0.2, 0, 0, 0, 0, 0.6, 0, 0, 0, 0.5, 0, 0, 0],
             [0.6, 0, 0, 0, 0, 0, 0.4, 0.3, 0.1, 0, 0, 0, 0, 0, 1],
             [0.3, 0, 0, 0.2, 0, 0, 0, 0.6, 0, 0.2, 0, 0, 0, 0, 0],
             [0.6, 0, 0.2, 0, 0, 0, 0, 0.6, 0.2, 0, 0, 0, 0, 0, 0],
             [0.3, 0, 0, 0, 0.3, 0, 0, 0.6, 0, 0, 0, 0, 0, 0.1, 1],
             [0.3, 0, 0.4, 0, 0, 0, 0, 0.6, 0.2, 0, 0, 0, 0, 0, 0],
             [0.6, 0.3, 0, 0, 0, 0, 0, 0.3, 0, 0, 0, 0.3, 0, 0, 0],
             [0.3, 0, 0, 0, 0, 0.6, 0, 0.6, 0, 0, 0.3, 0, 0, 0, 0],
             [0.3, 0.1, 0, 0, 0, 0, 0, 0.6, 0, 0, 0, 0.6, 0, 0, 0],
             [0.3, 0, 0, 0, 0.3, 0, 0, 0.6, 0, 0, 0, 0, 0.5, 0, 1],
             [0.6, 0, 0.2, 0, 0, 0, 0, 0.3, 0, 0, 0, 0, 0.6, 0, 1],
             [0.6, 0, 0, 0, 0, 0, 0.4, 0.3, 0, 0, 0, 0, 0.6, 0, 1],
             [0.6, 0.3, 0, 0, 0, 0, 0, 0.6, 0, 0, 0, 0.5, 0, 0, 0],
             [0.6, 0, 0, 0, 0.6, 0, 0, 0.3, 0, 0, 0.2, 0, 0, 0, 1],
             [0.6, 0, 0, 0, 0, 0.6, 0, 0.6, 0, 0, 0, 0, 0.5, 0, 1],
             [0.3, 0, 0, 0.2, 0, 0, 0, 0.6, 0, 0, 0, 0, 0.6, 0, 0],
             [0.6, 0, 0, 0, 0.5, 0, 0, 0.6, 0, 0, 0, 0.6, 0, 0, 1],
             [0.6, 0, 0, 0, 0, 0, 0.4, 0.3, 0, 0, 0, 0.3, 0, 0, 0],
             [0.6, 0, 0.2, 0, 0, 0, 0, 0.3, 0, 0, 0.2, 0, 0, 0, 1],
             [0.6, 0, 0, 0, 0, 0, 0.4, 0.6, 0.3, 0, 0, 0, 0, 0, 1],
             [0.6, 0.2, 0, 0, 0, 0, 0, 0.6, 0, 0, 0, 0, 0, 0.4, 0],
             [0.6, 0.3, 0, 0, 0, 0, 0, 0.6, 0, 0, 0, 0, 0.6, 0, 0],
             [0.6, 0, 0, 0, 0, 0.5, 0, 0.6, 0, 0, 0, 0, 0.6, 0, 0],
             [0.3, 0, 0, 0, 0.3, 0, 0, 0.6, 0.3, 0, 0, 0, 0, 0, 1],
             [0.6, 0, 0.1, 0, 0, 0, 0, 0.6, 0, 0, 0, 0.6, 0, 0, 0],
             [0.6, 0, 0.1, 0, 0, 0, 0, 0.6, 0, 0, 0, 0.5, 0, 0, 0],
             [0.3, 0, 0.4, 0, 0, 0, 0, 0.6, 0.3, 0, 0, 0, 0, 0, 0],
             [0.6, 0, 0, 0.3, 0, 0, 0, 0.3, 0, 0, 0.2, 0, 0, 0, 1],
             [0.3, 0, 0.4, 0, 0, 0, 0, 0.6, 0, 0, 0.4, 0, 0, 0, 0],
             [0.3, 0, 0, 0, 0, 0.6, 0, 0.6, 0, 0, 0, 0, 0, 0.1, 0],
             [0.3, 0, 0.4, 0, 0, 0, 0, 0.6, 0, 0, 0, 0, 0, 0.4, 0],
             [0.3, 0, 0, 0, 0.3, 0, 0, 0.6, 0, 0, 0, 0, 0, 0.4, 1],
             [0.6, 0, 0, 0, 0.5, 0, 0, 0.6, 0, 0.1, 0, 0, 0, 0, 1],
             [0.6, 0, 0, 0, 0.6, 0, 0, 0.3, 0, 0, 0, 0.3, 0, 0, 1],
             [0.6, 0, 0, 0, 0, 0.6, 0, 0.3, 0, 0, 0, 0.3, 0, 0, 1],
             [0.6, 0, 0, 0, 0.5, 0, 0, 0.6, 0, 0, 0, 0, 0.6, 0, 1],
             [0.6, 0, 0, 0, 0.5, 0, 0, 0.3, 0, 0, 0, 0.3, 0, 0, 1],
             [0.6, 0, 0, 0.4, 0, 0, 0, 0.6, 0.2, 0, 0, 0, 0, 0, 0],
             [0.6, 0, 0, 0, 0.5, 0, 0, 0.3, 0, 0, 0, 0, 0.6, 0, 1],
             [0.6, 0, 0, 0, 0, 0, 0.4, 0.6, 0, 0, 0, 0.5, 0, 0, 0],
             [0.3, 0, 0, 0, 0.3, 0, 0, 0.6, 0, 0, 0, 0, 0.6, 0, 1],
             [0.6, 0, 0.1, 0, 0, 0, 0, 0.6, 0, 0, 0, 0, 0.5, 0, 1],
             [0.6, 0, 0, 0, 0, 0, 0.4, 0.6, 0, 0, 0, 0.6, 0, 0, 0],
             [0.6, 0, 0, 0, 0.5, 0, 0, 0.6, 0, 0, 0, 0.5, 0, 0, 0],
             [0.6, 0, 0, 0, 0, 0, 0.1, 0.6, 0.2, 0, 0, 0, 0, 0, 0],
             [0.6, 0, 0.1, 0, 0, 0, 0, 0.3, 0, 0.4, 0, 0, 0, 0, 1],
             [0.3, 0, 0, 0, 0, 0.6, 0, 0.6, 0.2, 0, 0, 0, 0, 0, 0],
             [0.6, 0, 0, 0, 0, 0.5, 0, 0.6, 0, 0, 0, 0.5, 0, 0, 1],
             [0.6, 0, 0.1, 0, 0, 0, 0, 0.3, 0, 0, 0.2, 0, 0, 0, 1],
             [0.3, 0, 0.4, 0, 0, 0, 0, 0.6, 0, 0.2, 0, 0, 0, 0, 0],
             [0.6, 0, 0, 0, 0, 0, 0.4, 0.6, 0, 0, 0, 0, 0.5, 0, 1],
             [0.3, 0, 0, 0.2, 0, 0, 0, 0.6, 0, 0, 0, 0, 0.5, 0, 0],
             [0.6, 0, 0, 0.3, 0, 0, 0, 0.6, 0, 0, 0.4, 0, 0, 0, 1],
             [0.6, 0, 0, 0, 0, 0.6, 0, 0.6, 0.2, 0, 0, 0, 0, 0, 1],
             [0.3, 0, 0.4, 0, 0, 0, 0, 0.6, 0, 0, 0, 0.5, 0, 0, 0],
             [0.3, 0, 0, 0, 0, 0.6, 0, 0.6, 0, 0, 0, 0, 0.6, 0, 0],
             [0.6, 0, 0, 0, 0.5, 0, 0, 0.3, 0.1, 0, 0, 0, 0, 0, 1],
             [0.6, 0, 0, 0, 0, 0.6, 0, 0.3, 0.1, 0, 0, 0, 0, 0, 1],
             [0.3, 0.1, 0, 0, 0, 0, 0, 0.6, 0, 0, 0, 0, 0, 0.4, 0],
             [0.3, 0.1, 0, 0, 0, 0, 0, 0.6, 0, 0.2, 0, 0, 0, 0, 0],
             [0.6, 0, 0, 0.3, 0, 0, 0, 0.6, 0, 0, 0.3, 0, 0, 0, 0],
             [0.3, 0, 0, 0.2, 0, 0, 0, 0.6, 0, 0, 0.3, 0, 0, 0, 0],
             [0.6, 0.3, 0, 0, 0, 0, 0, 0.6, 0.2, 0, 0, 0, 0, 0, 0],
             [0.6, 0.2, 0, 0, 0, 0, 0, 0.3, 0, 0, 0.2, 0, 0, 0, 1],
             [0.6, 0, 0, 0.3, 0, 0, 0, 0.3, 0, 0.4, 0, 0, 0, 0, 1],
             [0.6, 0, 0.1, 0, 0, 0, 0, 0.6, 0.2, 0, 0, 0, 0, 0, 0],
             [0.3, 0, 0, 0, 0.3, 0, 0, 0.6, 0, 0, 0, 0.6, 0, 0, 0],
             [0.6, 0, 0, 0.4, 0, 0, 0, 0.6, 0, 0, 0.3, 0, 0, 0, 0],
             [0.3, 0, 0, 0, 0, 0, 0.5, 0.6, 0, 0, 0, 0, 0, 0.4, 0],
             [0.6, 0, 0.2, 0, 0, 0, 0, 0.6, 0, 0, 0, 0, 0.6, 0, 0],
             [0.3, 0, 0, 0, 0, 0.6, 0, 0.6, 0, 0, 0.4, 0, 0, 0, 0],
             [0.3, 0, 0, 0.2, 0, 0, 0, 0.6, 0.3, 0, 0, 0, 0, 0, 0],
             [0.3, 0, 0, 0, 0, 0, 0.5, 0.6, 0, 0.2, 0, 0, 0, 0, 0],
             [0.6, 0, 0, 0, 0, 0, 0.1, 0.6, 0, 0, 0, 0, 0, 0.4, 0],
             [0.3, 0, 0.4, 0, 0, 0, 0, 0.6, 0, 0, 0, 0.6, 0, 0, 0],
             [0.6, 0, 0, 0.3, 0, 0, 0, 0.3, 0, 0, 0, 0.3, 0, 0, 0],
             [0.6, 0.2, 0, 0, 0, 0, 0, 0.6, 0, 0.1, 0, 0, 0, 0, 1],
             [0.6, 0, 0, 0.4, 0, 0, 0, 0.3, 0.1, 0, 0, 0, 0, 0, 1],
             [0.6, 0, 0, 0, 0, 0.6, 0, 0.6, 0, 0, 0, 0.6, 0, 0, 1],
             [0.6, 0, 0.2, 0, 0, 0, 0, 0.6, 0, 0, 0, 0, 0, 0.4, 0],
             [0.6, 0.2, 0, 0, 0, 0, 0, 0.6, 0, 0, 0, 0, 0.5, 0, 1],
             [0.6, 0, 0, 0.3, 0, 0, 0, 0.6, 0, 0.1, 0, 0, 0, 0, 1],
             [0.6, 0, 0, 0, 0, 0, 0.1, 0.3, 0, 0, 0, 0, 0.6, 0, 1],
             [0.3, 0, 0, 0, 0.3, 0, 0, 0.6, 0, 0.2, 0, 0, 0, 0, 1],
             [0.6, 0, 0, 0.4, 0, 0, 0, 0.3, 0, 0, 0.2, 0, 0, 0, 1],
             [0.3, 0, 0, 0, 0.3, 0, 0, 0.6, 0.2, 0, 0, 0, 0, 0, 1],
             [0.6, 0, 0, 0.4, 0, 0, 0, 0.3, 0, 0, 0, 0, 0, 0.5, 1],
             [0.6, 0.2, 0, 0, 0, 0, 0, 0.3, 0, 0.4, 0, 0, 0, 0, 1],
             [0.3, 0, 0, 0, 0, 0.6, 0, 0.6, 0, 0, 0, 0.5, 0, 0, 1],
             [0.6, 0, 0, 0, 0.6, 0, 0, 0.6, 0, 0, 0, 0, 0.6, 0, 1],
             [0.3, 0.1, 0, 0, 0, 0, 0, 0.6, 0.2, 0, 0, 0, 0, 0, 0],
             [0.6, 0, 0, 0, 0, 0.6, 0, 0.3, 0, 0, 0, 0, 0.6, 0, 1],
             [0.6, 0, 0, 0, 0, 0.5, 0, 0.6, 0.2, 0, 0, 0, 0, 0, 0],
             [0.6, 0, 0, 0, 0, 0.5, 0, 0.3, 0, 0.4, 0, 0, 0, 0, 1],
             [0.6, 0, 0, 0, 0.6, 0, 0, 0.3, 0, 0, 0, 0, 0.6, 0, 1],
             [0.6, 0, 0, 0, 0, 0, 0.1, 0.6, 0, 0, 0.3, 0, 0, 0, 0],
             [0.6, 0, 0, 0, 0, 0, 0.4, 0.6, 0, 0, 0.3, 0, 0, 0, 1],
             [0.6, 0, 0.1, 0, 0, 0, 0, 0.6, 0, 0, 0.4, 0, 0, 0, 1],
             [0.6, 0, 0, 0, 0.6, 0, 0, 0.3, 0.1, 0, 0, 0, 0, 0, 1],
             [0.6, 0, 0, 0, 0.5, 0, 0, 0.6, 0, 0, 0.4, 0, 0, 0, 1],
             [0.6, 0, 0, 0, 0.6, 0, 0, 0.3, 0, 0.4, 0, 0, 0, 0, 1],
             [0.6, 0, 0, 0.3, 0, 0, 0, 0.6, 0, 0, 0, 0.5, 0, 0, 0],
             [0.6, 0, 0, 0, 0, 0.5, 0, 0.3, 0, 0, 0.2, 0, 0, 0, 1],
             [0.6, 0, 0, 0, 0, 0, 0.1, 0.6, 0, 0.1, 0, 0, 0, 0, 0],
             [0.6, 0, 0, 0, 0, 0.6, 0, 0.6, 0, 0, 0.3, 0, 0, 0, 1],
             [0.6, 0, 0, 0.4, 0, 0, 0, 0.3, 0, 0.4, 0, 0, 0, 0, 1],
             [0.6, 0, 0, 0, 0, 0, 0.4, 0.6, 0, 0, 0, 0, 0.6, 0, 0],
             [0.6, 0, 0, 0.3, 0, 0, 0, 0.3, 0.1, 0, 0, 0, 0, 0, 1],
             [0.6, 0, 0.1, 0, 0, 0, 0, 0.6, 0, 0.2, 0, 0, 0, 0, 1],
             [0.6, 0, 0.1, 0, 0, 0, 0, 0.3, 0, 0, 0, 0, 0, 0.5, 1],
             [0.6, 0, 0, 0, 0, 0, 0.4, 0.3, 0, 0, 0.2, 0, 0, 0, 1],
             [0.6, 0.3, 0, 0, 0, 0, 0, 0.6, 0, 0.1, 0, 0, 0, 0, 0],
             [0.6, 0, 0, 0, 0, 0.6, 0, 0.3, 0, 0, 0, 0, 0, 0.5, 1],
             [0.6, 0, 0, 0, 0, 0, 0.1, 0.6, 0, 0, 0, 0, 0.6, 0, 0],
             [0.3, 0, 0, 0, 0, 0, 0.5, 0.6, 0, 0, 0.3, 0, 0, 0, 0],
             [0.6, 0, 0, 0, 0.5, 0, 0, 0.6, 0, 0, 0, 0, 0, 0.1, 1],
             [0.6, 0, 0, 0.3, 0, 0, 0, 0.6, 0, 0, 0, 0, 0, 0.1, 1],
             [0.6, 0, 0, 0, 0, 0, 0.1, 0.6, 0, 0, 0, 0.5, 0, 0, 0],
             [0.6, 0, 0, 0, 0, 0, 0.4, 0.6, 0, 0.1, 0, 0, 0, 0, 1],
             [0.6, 0.3, 0, 0, 0, 0, 0, 0.3, 0, 0, 0, 0, 0, 0.5, 1],
             [0.6, 0, 0, 0, 0.6, 0, 0, 0.3, 0, 0, 0, 0, 0, 0.5, 1],
             [0.3, 0, 0, 0.2, 0, 0, 0, 0.6, 0, 0, 0, 0.5, 0, 0, 0],
             [0.3, 0, 0, 0, 0, 0, 0.5, 0.6, 0, 0, 0.4, 0, 0, 0, 0],
             [0.3, 0, 0, 0, 0, 0, 0.5, 0.6, 0, 0, 0, 0.5, 0, 0, 0],
             [0.6, 0, 0, 0, 0, 0.6, 0, 0.6, 0, 0, 0.4, 0, 0, 0, 1],
             [0.6, 0, 0, 0, 0, 0, 0.1, 0.3, 0, 0, 0, 0, 0, 0.5, 1],
             [0.6, 0, 0, 0.3, 0, 0, 0, 0.3, 0, 0, 0, 0, 0, 0.5, 1],
             [0.3, 0, 0.4, 0, 0, 0, 0, 0.6, 0, 0, 0.3, 0, 0, 0, 0],
             [0.6, 0.2, 0, 0, 0, 0, 0, 0.6, 0, 0, 0, 0.6, 0, 0, 0],
             [0.6, 0, 0, 0, 0, 0, 0.1, 0.3, 0.1, 0, 0, 0, 0, 0, 1],
             [0.3, 0, 0, 0, 0.3, 0, 0, 0.6, 0, 0, 0.3, 0, 0, 0, 1],
             [0.6, 0, 0, 0, 0, 0.6, 0, 0.6, 0, 0, 0, 0, 0, 0.4, 1],
             [0.6, 0.3, 0, 0, 0, 0, 0, 0.3, 0, 0.4, 0, 0, 0, 0, 1],
             [0.6, 0, 0.2, 0, 0, 0, 0, 0.6, 0, 0.1, 0, 0, 0, 0, 0],
             [0.6, 0, 0, 0.3, 0, 0, 0, 0.6, 0, 0, 0, 0.6, 0, 0, 0],
             [0.6, 0, 0, 0, 0, 0, 0.4, 0.6, 0, 0.2, 0, 0, 0, 0, 1],
             [0.6, 0, 0, 0, 0, 0, 0.4, 0.6, 0.2, 0, 0, 0, 0, 0, 1],
             [0.6, 0, 0, 0, 0, 0, 0.4, 0.3, 0, 0.4, 0, 0, 0, 0, 1],
             [0.3, 0, 0, 0, 0, 0, 0.5, 0.6, 0.3, 0, 0, 0, 0, 0, 0],
             [0.6, 0, 0, 0.3, 0, 0, 0, 0.3, 0, 0, 0, 0, 0.6, 0, 1],
             [0.3, 0, 0, 0, 0.3, 0, 0, 0.6, 0, 0, 0, 0.5, 0, 0, 0],
             [0.6, 0, 0, 0.3, 0, 0, 0, 0.6, 0.2, 0, 0, 0, 0, 0, 1],
             [0.6, 0, 0.2, 0, 0, 0, 0, 0.3, 0, 0, 0, 0.3, 0, 0, 0],
             [0.3, 0, 0, 0.2, 0, 0, 0, 0.6, 0, 0, 0.4, 0, 0, 0, 0],
             [0.6, 0, 0, 0, 0.6, 0, 0, 0.6, 0, 0.1, 0, 0, 0, 0, 1],
             [0.6, 0, 0, 0, 0.5, 0, 0, 0.6, 0, 0, 0, 0, 0.5, 0, 1],
             [0.6, 0, 0, 0.4, 0, 0, 0, 0.6, 0, 0, 0, 0, 0, 0.4, 0],
             [0.3, 0, 0.4, 0, 0, 0, 0, 0.6, 0, 0, 0, 0, 0.6, 0, 0],
             [0.6, 0.2, 0, 0, 0, 0, 0, 0.6, 0, 0, 0, 0.5, 0, 0, 0],
             [0.6, 0, 0, 0, 0, 0.6, 0, 0.6, 0.3, 0, 0, 0, 0, 0, 1],
             [0.3, 0, 0, 0, 0, 0.6, 0, 0.6, 0, 0.1, 0, 0, 0, 0, 0],
             [0.6, 0.3, 0, 0, 0, 0, 0, 0.3, 0.1, 0, 0, 0, 0, 0, 1],
             [0.6, 0, 0, 0, 0.5, 0, 0, 0.6, 0.2, 0, 0, 0, 0, 0, 1],
             [0.3, 0, 0, 0, 0, 0.6, 0, 0.6, 0.3, 0, 0, 0, 0, 0, 0],
             [0.6, 0, 0, 0.3, 0, 0, 0, 0.6, 0, 0, 0, 0, 0.5, 0, 1],
             [0.3, 0.1, 0, 0, 0, 0, 0, 0.6, 0, 0, 0, 0, 0.6, 0, 0],
             [0.6, 0, 0, 0.4, 0, 0, 0, 0.6, 0, 0.1, 0, 0, 0, 0, 0],
             [0.3, 0, 0, 0.2, 0, 0, 0, 0.6, 0, 0, 0, 0, 0, 0.4, 0],
             [0.6, 0, 0.2, 0, 0, 0, 0, 0.3, 0.1, 0, 0, 0, 0, 0, 1],
             [0.6, 0, 0.1, 0, 0, 0, 0, 0.6, 0, 0, 0, 0, 0, 0.1, 1],
             [0.6, 0, 0, 0, 0.5, 0, 0, 0.6, 0, 0, 0, 0, 0, 0.4, 1],
             [0.6, 0, 0, 0, 0, 0, 0.4, 0.3, 0, 0, 0, 0, 0, 0.5, 1],
             [0.6, 0.2, 0, 0, 0, 0, 0, 0.6, 0, 0.2, 0, 0, 0, 0, 1],
             [0.3, 0, 0, 0.2, 0, 0, 0, 0.6, 0, 0, 0, 0.6, 0, 0, 0],
             [0.6, 0, 0, 0, 0.6, 0, 0, 0.6, 0, 0, 0.3, 0, 0, 0, 1],
             [0.6, 0, 0.1, 0, 0, 0, 0, 0.6, 0.3, 0, 0, 0, 0, 0, 1],
             [0.6, 0.2, 0, 0, 0, 0, 0, 0.3, 0.1, 0, 0, 0, 0, 0, 1],
             [0.6, 0, 0.1, 0, 0, 0, 0, 0.3, 0.1, 0, 0, 0, 0, 0, 1],
             [0.6, 0.3, 0, 0, 0, 0, 0, 0.6, 0, 0, 0, 0, 0, 0.4, 0],
             [0.6, 0, 0, 0, 0.5, 0, 0, 0.6, 0.3, 0, 0, 0, 0, 0, 1],
             [0.6, 0, 0, 0.4, 0, 0, 0, 0.6, 0, 0, 0, 0.5, 0, 0, 0],
             [0.6, 0, 0, 0, 0, 0, 0.4, 0.6, 0, 0, 0, 0, 0, 0.1, 1],
             [0.6, 0, 0, 0, 0, 0.6, 0, 0.3, 0, 0.4, 0, 0, 0, 0, 1],
             [0.6, 0, 0, 0, 0, 0.5, 0, 0.6, 0, 0, 0.3, 0, 0, 0, 0],
             [0.6, 0, 0, 0, 0, 0.6, 0, 0.6, 0, 0, 0, 0.5, 0, 0, 1],
             [0.6, 0, 0, 0, 0, 0, 0.4, 0.6, 0, 0, 0, 0, 0, 0.4, 0],
             [0.3, 0.1, 0, 0, 0, 0, 0, 0.6, 0, 0, 0.4, 0, 0, 0, 0],
             [0.6, 0.2, 0, 0, 0, 0, 0, 0.3, 0, 0, 0, 0, 0.6, 0, 1],
             [0.6, 0, 0, 0, 0, 0, 0.1, 0.3, 0, 0, 0, 0.3, 0, 0, 0],
             [0.6, 0, 0, 0, 0.5, 0, 0, 0.3, 0, 0, 0, 0, 0, 0.5, 1],
             [0.6, 0, 0, 0, 0, 0.6, 0, 0.3, 0, 0, 0.2, 0, 0, 0, 1],
             [0.3, 0, 0.4, 0, 0, 0, 0, 0.6, 0, 0.1, 0, 0, 0, 0, 0],
             [0.6, 0.2, 0, 0, 0, 0, 0, 0.6, 0, 0, 0, 0, 0, 0.1, 1],
             [0.3, 0, 0, 0, 0, 0, 0.5, 0.6, 0, 0.1, 0, 0, 0, 0, 0],
             [0.6, 0, 0.2, 0, 0, 0, 0, 0.3, 0, 0, 0, 0, 0, 0.5, 1],
             [0.6, 0, 0, 0, 0, 0, 0.4, 0.6, 0, 0, 0.4, 0, 0, 0, 1],
             [0.6, 0.2, 0, 0, 0, 0, 0, 0.3, 0, 0, 0, 0.3, 0, 0, 0],
             [0.6, 0, 0, 0, 0.5, 0, 0, 0.6, 0, 0.2, 0, 0, 0, 0, 1],
             [0.6, 0, 0, 0.4, 0, 0, 0, 0.3, 0, 0, 0, 0.3, 0, 0, 0],
             [0.6, 0, 0.2, 0, 0, 0, 0, 0.3, 0, 0.4, 0, 0, 0, 0, 1],
             [0.3, 0.1, 0, 0, 0, 0, 0, 0.6, 0, 0, 0, 0, 0.5, 0, 0],
             [0.6, 0.3, 0, 0, 0, 0, 0, 0.6, 0, 0, 0.3, 0, 0, 0, 0],
             [0.6, 0, 0, 0, 0, 0, 0.1, 0.3, 0, 0, 0.2, 0, 0, 0, 1],
             [0.3, 0, 0, 0, 0, 0, 0.5, 0.6, 0.2, 0, 0, 0, 0, 0, 0],
             [0.6, 0, 0, 0.3, 0, 0, 0, 0.6, 0, 0, 0, 0, 0, 0.4, 0],
             [0.6, 0, 0, 0, 0, 0, 0.1, 0.3, 0, 0.4, 0, 0, 0, 0, 1],
             [0.6, 0, 0, 0, 0, 0.5, 0, 0.3, 0, 0, 0, 0, 0.6, 0, 1],
             [0.3, 0.1, 0, 0, 0, 0, 0, 0.6, 0, 0, 0, 0.5, 0, 0, 0],
             [0.6, 0, 0, 0, 0.5, 0, 0, 0.6, 0, 0, 0.3, 0, 0, 0, 1],
             [0.6, 0, 0.1, 0, 0, 0, 0, 0.3, 0, 0, 0, 0.3, 0, 0, 0],
             [0.3, 0, 0, 0, 0, 0, 0.5, 0.6, 0, 0, 0, 0.6, 0, 0, 0],
             [0.3, 0, 0, 0, 0.3, 0, 0, 0.6, 0, 0.1, 0, 0, 0, 0, 1],
             [0.6, 0, 0, 0, 0, 0.5, 0, 0.6, 0, 0, 0, 0, 0, 0.4, 0],
             [0.6, 0.2, 0, 0, 0, 0, 0, 0.6, 0.3, 0, 0, 0, 0, 0, 1],
             [0.3, 0, 0, 0, 0, 0.6, 0, 0.6, 0, 0, 0, 0.6, 0, 0, 1]]
    for x in range(len(cases)):
        trainingSet.append(cases[x])
        if float(x) > float(len(cases) * 0.6):
            testSet.append(cases[x])


def loadDatasetNOpref(split, trainingSet=[], testSet=[]):
    cases = [[0.3, 0, 0, 0, 0, 1.0, 0, 0.6, 1.0, 0, 0, 0, 0, 0, 0],
             [0.6, 0, 0, 0, 1.0, 0, 0, 0.6, 0, 0, 0, 1.0, 0, 0, 0],
             [0.6, 1.0, 0, 0, 0, 0, 0, 0.6, 0, 0, 0, 0, 0, 1.0, 0],
             [0.3, 0, 0, 0, 0, 0, 1.0, 0.6, 0, 1.0, 0, 0, 0, 0, 0],
             [0.6, 0, 1.0, 0, 0, 0, 0, 0.6, 0, 1.0, 0, 0, 0, 0, 0],
             [0.3, 0, 0, 0, 1.0, 0, 0, 0.6, 0, 0, 0, 0, 0, 1.0, 1],
             [0.6, 0, 0, 0, 0, 0, 1.0, 0.6, 0, 0, 1.0, 0, 0, 0, 1],
             [0.6, 0, 0, 0, 0, 0, 1.0, 0.6, 0, 0, 0, 1.0, 0, 0, 0],
             [0.6, 0, 1.0, 0, 0, 0, 0, 0.6, 0, 1.0, 0, 0, 0, 0, 1],
             [0.3, 0, 0, 0, 1.0, 0, 0, 0.6, 0, 0, 0, 0, 1.0, 0, 1],
             [0.6, 1.0, 0, 0, 0, 0, 0, 0.3, 0, 0, 0, 1.0, 0, 0, 0],
             [0.3, 0, 0, 0, 0, 1.0, 0, 0.6, 0, 0, 1.0, 0, 0, 0, 0],
             [0.3, 0, 1.0, 0, 0, 0, 0, 0.6, 0, 0, 1.0, 0, 0, 0, 0],
             [0.6, 0, 0, 0, 0, 0, 1.0, 0.6, 0, 1.0, 0, 0, 0, 0, 1],
             [0.3, 0, 0, 0, 0, 1.0, 0, 0.6, 0, 0, 0, 0, 1.0, 0, 0],
             [0.6, 0, 0, 0, 1.0, 0, 0, 0.3, 0, 0, 0, 1.0, 0, 0, 1],
             [0.3, 0, 0, 0, 0, 1.0, 0, 0.6, 0, 0, 0, 1.0, 0, 0, 1],
             [0.6, 0, 0, 0, 1.0, 0, 0, 0.3, 0, 0, 0, 1.0, 0, 0, 1],
             [0.6, 0, 0, 0, 0, 0, 1.0, 0.6, 1.0, 0, 0, 0, 0, 0, 1],
             [0.6, 0, 0, 0, 0, 0, 1.0, 0.6, 0, 0, 0, 0, 0, 1.0, 1],
             [0.6, 0, 0, 0, 1.0, 0, 0, 0.3, 0, 0, 0, 0, 1.0, 0, 1],
             [0.6, 0, 0, 0, 0, 1.0, 0, 0.6, 0, 0, 0, 1.0, 0, 0, 1],
             [0.6, 0, 1.0, 0, 0, 0, 0, 0.3, 0, 1.0, 0, 0, 0, 0, 1],
             [0.6, 0, 0, 0, 0, 0, 1.0, 0.6, 0, 0, 0, 1.0, 0, 0, 0],
             [0.3, 0, 0, 1.0, 0, 0, 0, 0.6, 0, 0, 0, 1.0, 0, 0, 0],
             [0.6, 0, 1.0, 0, 0, 0, 0, 0.6, 1.0, 0, 0, 0, 0, 0, 0],
             [0.3, 0, 0, 0, 0, 0, 1.0, 0.6, 1.0, 0, 0, 0, 0, 0, 0],
             [0.6, 1.0, 0, 0, 0, 0, 0, 0.6, 0, 0, 0, 1.0, 0, 0, 0],
             [0.6, 0, 0, 0, 0, 1.0, 0, 0.6, 0, 0, 0, 0, 0, 1.0, 1],
             [0.6, 0, 1.0, 0, 0, 0, 0, 0.3, 1.0, 0, 0, 0, 0, 0, 1],
             [0.6, 0, 0, 1.0, 0, 0, 0, 0.6, 0, 0, 0, 0, 1.0, 0, 1],
             [0.6, 0, 1.0, 0, 0, 0, 0, 0.6, 0, 0, 0, 0, 0, 1.0, 0],
             [0.6, 0, 0, 0, 0, 0, 1.0, 0.6, 0, 0, 1.0, 0, 0, 0, 0],
             [0.3, 0, 0, 0, 0, 0, 1.0, 0.6, 0, 1.0, 0, 0, 0, 0, 0],
             [0.6, 1.0, 0, 0, 0, 0, 0, 0.6, 1.0, 0, 0, 0, 0, 0, 1],
             [0.3, 0, 1.0, 0, 0, 0, 0, 0.6, 0, 0, 0, 0, 0, 1.0, 0],
             [0.3, 0, 1.0, 0, 0, 0, 0, 0.6, 0, 1.0, 0, 0, 0, 0, 0],
             [0.6, 1.0, 0, 0, 0, 0, 0, 0.6, 0, 1.0, 0, 0, 0, 0, 0],
             [0.6, 0, 1.0, 0, 0, 0, 0, 0.3, 1.0, 0, 0, 0, 0, 0, 1],
             [0.3, 1.0, 0, 0, 0, 0, 0, 0.6, 0, 0, 0, 0, 1.0, 0, 0],
             [0.6, 0, 0, 0, 0, 0, 1.0, 0.3, 0, 0, 0, 0, 1.0, 0, 1],
             [0.6, 0, 0, 0, 0, 0, 1.0, 0.6, 0, 0, 0, 0, 1.0, 0, 0],
             [0.3, 0, 0, 0, 1.0, 0, 0, 0.6, 0, 1.0, 0, 0, 0, 0, 1],
             [0.6, 0, 0, 0, 0, 1.0, 0, 0.6, 1.0, 0, 0, 0, 0, 0, 1],
             [0.6, 1.0, 0, 0, 0, 0, 0, 0.6, 0, 0, 0, 1.0, 0, 0, 0],
             [0.6, 1.0, 0, 0, 0, 0, 0, 0.6, 0, 0, 0, 1.0, 0, 0, 0],
             [0.6, 0, 0, 0, 0, 0, 1.0, 0.3, 1.0, 0, 0, 0, 0, 0, 1],
             [0.6, 1.0, 0, 0, 0, 0, 0, 0.6, 0, 0, 1.0, 0, 0, 0, 0],
             [0.6, 0, 0, 0, 0, 1.0, 0, 0.6, 0, 0, 0, 1.0, 0, 0, 1],
             [0.6, 0, 1.0, 0, 0, 0, 0, 0.6, 0, 0, 0, 1.0, 0, 0, 0],
             [0.3, 0, 0, 0, 0, 0, 1.0, 0.6, 0, 0, 1.0, 0, 0, 0, 0],
             [0.6, 0, 0, 0, 0, 0, 1.0, 0.3, 0, 1.0, 0, 0, 0, 0, 1],
             [0.6, 0, 0, 1.0, 0, 0, 0, 0.6, 0, 1.0, 0, 0, 0, 0, 0],
             [0.3, 0, 0, 0, 1.0, 0, 0, 0.6, 0, 0, 1.0, 0, 0, 0, 1],
             [0.6, 1.0, 0, 0, 0, 0, 0, 0.6, 0, 0, 0, 0, 1.0, 0, 1],
             [0.6, 0, 0, 1.0, 0, 0, 0, 0.3, 0, 0, 0, 0, 1.0, 0, 1],
             [0.6, 0, 0, 0, 1.0, 0, 0, 0.6, 0, 0, 1.0, 0, 0, 0, 1],
             [0.3, 0, 1.0, 0, 0, 0, 0, 0.6, 0, 0, 0, 1.0, 0, 0, 0],
             [0.3, 0, 0, 0, 0, 0, 1.0, 0.6, 0, 0, 0, 1.0, 0, 0, 0],
             [0.3, 1.0, 0, 0, 0, 0, 0, 0.6, 1.0, 0, 0, 0, 0, 0, 0],
             [0.6, 0, 0, 0, 0, 1.0, 0, 0.6, 0, 0, 0, 0, 1.0, 0, 1],
             [0.6, 0, 0, 0, 1.0, 0, 0, 0.6, 0, 1.0, 0, 0, 0, 0, 1],
             [0.6, 0, 1.0, 0, 0, 0, 0, 0.6, 0, 0, 0, 1.0, 0, 0, 0],
             [0.6, 0, 0, 0, 1.0, 0, 0, 0.3, 0, 0, 0, 0, 0, 1.0, 1],
             [0.6, 0, 0, 1.0, 0, 0, 0, 0.6, 0, 0, 0, 1.0, 0, 0, 0],
             [0.6, 0, 0, 0, 0, 0, 1.0, 0.3, 0, 0, 0, 1.0, 0, 0, 0],
             [0.3, 0, 0, 0, 0, 1.0, 0, 0.6, 0, 0, 1.0, 0, 0, 0, 0],
             [0.3, 0, 0, 0, 1.0, 0, 0, 0.6, 1.0, 0, 0, 0, 0, 0, 1],
             [0.3, 0, 0, 0, 1.0, 0, 0, 0.6, 0, 1.0, 0, 0, 0, 0, 1],
             [0.6, 0, 1.0, 0, 0, 0, 0, 0.6, 1.0, 0, 0, 0, 0, 0, 1],
             [0.6, 0, 0, 0, 0, 0, 1.0, 0.6, 0, 0, 1.0, 0, 0, 0, 1],
             [0.6, 0, 0, 0, 0, 1.0, 0, 0.3, 0, 0, 1.0, 0, 0, 0, 1],
             [0.6, 0, 1.0, 0, 0, 0, 0, 0.6, 0, 0, 0, 0, 1.0, 0, 0],
             [0.6, 0, 0, 0, 0, 0, 1.0, 0.3, 0, 1.0, 0, 0, 0, 0, 1],
             [0.6, 0, 0, 1.0, 0, 0, 0, 0.6, 0, 0, 0, 1.0, 0, 0, 0],
             [0.6, 0, 0, 1.0, 0, 0, 0, 0.6, 0, 1.0, 0, 0, 0, 0, 1],
             [0.6, 0, 0, 0, 0, 0, 1.0, 0.3, 0, 0, 0, 1.0, 0, 0, 0],
             [0.6, 0, 0, 0, 1.0, 0, 0, 0.6, 0, 0, 0, 0, 0, 1.0, 1],
             [0.3, 0, 0, 0, 0, 1.0, 0, 0.6, 1.0, 0, 0, 0, 0, 0, 0],
             [0.6, 1.0, 0, 0, 0, 0, 0, 0.6, 0, 1.0, 0, 0, 0, 0, 1],
             [0.6, 0, 0, 0, 1.0, 0, 0, 0.6, 0, 0, 0, 0, 1.0, 0, 1],
             [0.3, 0, 1.0, 0, 0, 0, 0, 0.6, 0, 0, 0, 1.0, 0, 0, 0],
             [0.3, 0, 0, 0, 0, 0, 1.0, 0.6, 0, 0, 0, 0, 0, 1.0, 0],
             [0.6, 0, 0, 1.0, 0, 0, 0, 0.3, 0, 0, 1.0, 0, 0, 0, 1],
             [0.6, 0, 0, 0, 1.0, 0, 0, 0.6, 0, 0, 0, 0, 0, 1.0, 1],
             [0.6, 0, 0, 0, 0, 0, 1.0, 0.6, 0, 0, 0, 0, 0, 1.0, 0],
             [0.6, 0, 0, 0, 1.0, 0, 0, 0.6, 0, 1.0, 0, 0, 0, 0, 1],
             [0.6, 0, 0, 0, 1.0, 0, 0, 0.3, 1.0, 0, 0, 0, 0, 0, 1],
             [0.6, 1.0, 0, 0, 0, 0, 0, 0.3, 0, 0, 1.0, 0, 0, 0, 1],
             [0.6, 0, 1.0, 0, 0, 0, 0, 0.6, 0, 0, 0, 1.0, 0, 0, 0],
             [0.6, 1.0, 0, 0, 0, 0, 0, 0.6, 0, 1.0, 0, 0, 0, 0, 1],
             [0.3, 1.0, 0, 0, 0, 0, 0, 0.6, 0, 0, 0, 1.0, 0, 0, 0],
             [0.6, 1.0, 0, 0, 0, 0, 0, 0.3, 0, 1.0, 0, 0, 0, 0, 1],
             [0.6, 0, 0, 0, 0, 0, 1.0, 0.6, 0, 1.0, 0, 0, 0, 0, 1],
             [0.6, 0, 0, 0, 0, 1.0, 0, 0.6, 0, 0, 0, 0, 0, 1.0, 0],
             [0.6, 0, 0, 0, 1.0, 0, 0, 0.6, 0, 0, 0, 1.0, 0, 0, 1],
             [0.6, 0, 0, 0, 0, 0, 1.0, 0.6, 0, 0, 0, 1.0, 0, 0, 0],
             [0.6, 0, 0, 0, 0, 0, 1.0, 0.3, 0, 0, 1.0, 0, 0, 0, 1],
             [0.6, 0, 0, 0, 0, 1.0, 0, 0.6, 0, 0, 1.0, 0, 0, 0, 1],
             [0.6, 0, 0, 0, 1.0, 0, 0, 0.6, 0, 0, 0, 0, 1.0, 0, 1],
             [0.3, 1.0, 0, 0, 0, 0, 0, 0.6, 0, 0, 1.0, 0, 0, 0, 0],
             [0.6, 0, 0, 0, 1.0, 0, 0, 0.3, 1.0, 0, 0, 0, 0, 0, 1],
             [0.6, 1.0, 0, 0, 0, 0, 0, 0.6, 0, 0, 0, 0, 0, 1.0, 0],
             [0.6, 1.0, 0, 0, 0, 0, 0, 0.3, 0, 0, 0, 0, 0, 1.0, 1],
             [0.6, 0, 0, 0, 0, 1.0, 0, 0.3, 0, 0, 1.0, 0, 0, 0, 1],
             [0.6, 0, 1.0, 0, 0, 0, 0, 0.3, 0, 0, 1.0, 0, 0, 0, 1],
             [0.6, 0, 0, 1.0, 0, 0, 0, 0.6, 1.0, 0, 0, 0, 0, 0, 0],
             [0.6, 0, 1.0, 0, 0, 0, 0, 0.6, 1.0, 0, 0, 0, 0, 0, 0],
             [0.3, 0, 0, 0, 0, 1.0, 0, 0.6, 0, 0, 0, 0, 0, 1.0, 0],
             [0.6, 0, 0, 0, 0, 1.0, 0, 0.3, 0, 1.0, 0, 0, 0, 0, 1],
             [0.6, 0, 0, 1.0, 0, 0, 0, 0.6, 1.0, 0, 0, 0, 0, 0, 1],
             [0.6, 0, 0, 1.0, 0, 0, 0, 0.6, 0, 0, 0, 0, 0, 1.0, 1],
             [0.6, 0, 0, 1.0, 0, 0, 0, 0.6, 0, 0, 0, 1.0, 0, 0, 0],
             [0.6, 1.0, 0, 0, 0, 0, 0, 0.3, 0, 0, 0, 1.0, 0, 0, 0],
             [0.3, 1.0, 0, 0, 0, 0, 0, 0.6, 0, 1.0, 0, 0, 0, 0, 0],
             [0.3, 0, 0, 0, 1.0, 0, 0, 0.6, 0, 0, 0, 1.0, 0, 0, 0],
             [0.3, 0, 0, 0, 0, 1.0, 0, 0.6, 0, 1.0, 0, 0, 0, 0, 0],
             [0.6, 0, 0, 0, 1.0, 0, 0, 0.6, 1.0, 0, 0, 0, 0, 0, 1],
             [0.6, 0, 0, 0, 0, 1.0, 0, 0.6, 1.0, 0, 0, 0, 0, 0, 1],
             [0.3, 0, 0, 0, 1.0, 0, 0, 0.6, 0, 0, 0, 0, 0, 1.0, 1],
             [0.6, 0, 0, 1.0, 0, 0, 0, 0.3, 0, 0, 1.0, 0, 0, 0, 1],
             [0.6, 0, 0, 1.0, 0, 0, 0, 0.3, 0, 0, 0, 0, 0, 1.0, 1],
             [0.6, 0, 0, 1.0, 0, 0, 0, 0.3, 1.0, 0, 0, 0, 0, 0, 1],
             [0.6, 0, 0, 0, 0, 0, 1.0, 0.3, 0, 0, 1.0, 0, 0, 0, 1],
             [0.6, 0, 0, 0, 0, 1.0, 0, 0.3, 0, 1.0, 0, 0, 0, 0, 1],
             [0.3, 0, 1.0, 0, 0, 0, 0, 0.6, 0, 1.0, 0, 0, 0, 0, 0],
             [0.6, 1.0, 0, 0, 0, 0, 0, 0.6, 1.0, 0, 0, 0, 0, 0, 0],
             [0.6, 0, 0, 0, 0, 0, 1.0, 0.3, 0, 0, 0, 0, 1.0, 0, 1],
             [0.6, 0, 0, 0, 1.0, 0, 0, 0.6, 0, 0, 0, 0, 1.0, 0, 1],
             [0.6, 0, 0, 0, 0, 0, 1.0, 0.6, 0, 0, 0, 0, 1.0, 0, 0],
             [0.6, 0, 0, 0, 1.0, 0, 0, 0.6, 0, 1.0, 0, 0, 0, 0, 1],
             [0.3, 0, 0, 1.0, 0, 0, 0, 0.6, 0, 0, 1.0, 0, 0, 0, 0],
             [0.6, 0, 0, 1.0, 0, 0, 0, 0.6, 0, 0, 1.0, 0, 0, 0, 0],
             [0.6, 0, 0, 0, 0, 1.0, 0, 0.6, 0, 0, 0, 1.0, 0, 0, 1],
             [0.6, 0, 0, 0, 1.0, 0, 0, 0.6, 0, 0, 1.0, 0, 0, 0, 1],
             [0.6, 0, 0, 0, 0, 1.0, 0, 0.3, 0, 0, 0, 0, 1.0, 0, 1],
             [0.6, 0, 0, 1.0, 0, 0, 0, 0.6, 0, 0, 0, 0, 0, 1.0, 0],
             [0.3, 0, 0, 0, 1.0, 0, 0, 0.6, 0, 0, 0, 1.0, 0, 0, 0],
             [0.6, 0, 0, 0, 0, 0, 1.0, 0.6, 0, 1.0, 0, 0, 0, 0, 0],
             [0.3, 0, 0, 1.0, 0, 0, 0, 0.6, 0, 0, 1.0, 0, 0, 0, 0],
             [0.3, 0, 0, 1.0, 0, 0, 0, 0.6, 0, 1.0, 0, 0, 0, 0, 0],
             [0.3, 0, 1.0, 0, 0, 0, 0, 0.6, 0, 0, 0, 0, 1.0, 0, 0],
             [0.3, 0, 0, 0, 0, 0, 1.0, 0.6, 0, 0, 1.0, 0, 0, 0, 0],
             [0.3, 0, 1.0, 0, 0, 0, 0, 0.6, 0, 0, 1.0, 0, 0, 0, 0],
             [0.3, 0, 1.0, 0, 0, 0, 0, 0.6, 1.0, 0, 0, 0, 0, 0, 0],
             [0.3, 0, 1.0, 0, 0, 0, 0, 0.6, 1.0, 0, 0, 0, 0, 0, 0],
             [0.6, 0, 1.0, 0, 0, 0, 0, 0.3, 0, 1.0, 0, 0, 0, 0, 1],
             [0.3, 1.0, 0, 0, 0, 0, 0, 0.6, 0, 0, 0, 0, 0, 1.0, 0],
             [0.6, 0, 0, 1.0, 0, 0, 0, 0.6, 0, 0, 1.0, 0, 0, 0, 0],
             [0.6, 0, 0, 1.0, 0, 0, 0, 0.3, 0, 0, 0, 1.0, 0, 0, 0],
             [0.6, 0, 0, 1.0, 0, 0, 0, 0.3, 0, 1.0, 0, 0, 0, 0, 1],
             [0.3, 1.0, 0, 0, 0, 0, 0, 0.6, 0, 0, 0, 1.0, 0, 0, 0],
             [0.3, 0, 0, 0, 0, 1.0, 0, 0.6, 0, 0, 0, 1.0, 0, 0, 1],
             [0.6, 0, 0, 0, 0, 1.0, 0, 0.6, 1.0, 0, 0, 0, 0, 0, 0],
             [0.3, 0, 0, 1.0, 0, 0, 0, 0.6, 1.0, 0, 0, 0, 0, 0, 0],
             [0.6, 1.0, 0, 0, 0, 0, 0, 0.3, 1.0, 0, 0, 0, 0, 0, 1],
             [0.6, 0, 0, 0, 0, 1.0, 0, 0.6, 0, 0, 1.0, 0, 0, 0, 1],
             [0.6, 1.0, 0, 0, 0, 0, 0, 0.3, 0, 0, 0, 0, 1.0, 0, 1],
             [0.3, 0, 0, 1.0, 0, 0, 0, 0.6, 0, 0, 0, 0, 1.0, 0, 0],
             [0.6, 0, 0, 0, 0, 0, 1.0, 0.6, 1.0, 0, 0, 0, 0, 0, 1],
             [0.6, 0, 0, 0, 0, 0, 1.0, 0.6, 0, 0, 0, 0, 0, 1.0, 0],
             [0.6, 0, 1.0, 0, 0, 0, 0, 0.6, 0, 0, 0, 0, 0, 1.0, 1],
             [0.3, 0, 0, 1.0, 0, 0, 0, 0.6, 0, 0, 0, 0, 0, 1.0, 0],
             [0.3, 0, 0, 0, 1.0, 0, 0, 0.6, 1.0, 0, 0, 0, 0, 0, 1],
             [0.6, 0, 1.0, 0, 0, 0, 0, 0.3, 0, 0, 0, 0, 1.0, 0, 1],
             [0.6, 0, 0, 0, 0, 0, 1.0, 0.3, 1.0, 0, 0, 0, 0, 0, 1],
             [0.6, 0, 1.0, 0, 0, 0, 0, 0.3, 0, 0, 0, 1.0, 0, 0, 0],
             [0.6, 0, 0, 0, 0, 1.0, 0, 0.3, 0, 0, 0, 1.0, 0, 0, 1],
             [0.6, 0, 1.0, 0, 0, 0, 0, 0.3, 0, 0, 0, 0, 0, 1.0, 1],
             [0.6, 0, 0, 1.0, 0, 0, 0, 0.6, 0, 0, 1.0, 0, 0, 0, 1],
             [0.3, 0, 0, 0, 0, 0, 1.0, 0.6, 1.0, 0, 0, 0, 0, 0, 0],
             [0.6, 1.0, 0, 0, 0, 0, 0, 0.3, 1.0, 0, 0, 0, 0, 0, 1],
             [0.6, 0, 0, 0, 0, 1.0, 0, 0.6, 0, 0, 1.0, 0, 0, 0, 0],
             [0.6, 0, 0, 0, 0, 1.0, 0, 0.3, 1.0, 0, 0, 0, 0, 0, 1],
             [0.6, 0, 1.0, 0, 0, 0, 0, 0.3, 0, 0, 1.0, 0, 0, 0, 1],
             [0.6, 0, 0, 1.0, 0, 0, 0, 0.3, 0, 0, 0, 0, 0, 1.0, 1],
             [0.6, 1.0, 0, 0, 0, 0, 0, 0.6, 0, 0, 0, 0, 0, 1.0, 1],
             [0.6, 0, 0, 0, 0, 0, 1.0, 0.6, 0, 0, 0, 0, 1.0, 0, 1],
             [0.6, 0, 0, 0, 1.0, 0, 0, 0.3, 0, 0, 0, 0, 0, 1.0, 1],
             [0.6, 0, 0, 0, 1.0, 0, 0, 0.6, 0, 0, 1.0, 0, 0, 0, 1],
             [0.6, 0, 1.0, 0, 0, 0, 0, 0.3, 0, 0, 0, 0, 0, 1.0, 1],
             [0.6, 0, 0, 0, 0, 1.0, 0, 0.3, 0, 0, 0, 0, 0, 1.0, 1],
             [0.6, 0, 0, 0, 1.0, 0, 0, 0.3, 0, 1.0, 0, 0, 0, 0, 1],
             [0.6, 0, 1.0, 0, 0, 0, 0, 0.6, 0, 0, 1.0, 0, 0, 0, 1],
             [0.6, 0, 0, 0, 0, 1.0, 0, 0.3, 0, 0, 0, 0, 1.0, 0, 1],
             [0.6, 0, 0, 0, 0, 0, 1.0, 0.3, 0, 0, 0, 0, 0, 1.0, 1],
             [0.6, 0, 0, 0, 0, 1.0, 0, 0.6, 0, 0, 0, 0, 1.0, 0, 0],
             [0.6, 0, 0, 0, 1.0, 0, 0, 0.6, 1.0, 0, 0, 0, 0, 0, 1],
             [0.6, 0, 0, 1.0, 0, 0, 0, 0.3, 0, 1.0, 0, 0, 0, 0, 1],
             [0.6, 0, 0, 0, 1.0, 0, 0, 0.3, 0, 0, 1.0, 0, 0, 0, 1],
             [0.6, 0, 0, 0, 0, 0, 1.0, 0.6, 1.0, 0, 0, 0, 0, 0, 0],
             [0.6, 1.0, 0, 0, 0, 0, 0, 0.6, 0, 0, 0, 0, 1.0, 0, 0],
             [0.6, 0, 1.0, 0, 0, 0, 0, 0.6, 0, 0, 0, 0, 1.0, 0, 1],
             [0.3, 1.0, 0, 0, 0, 0, 0, 0.6, 0, 0, 0, 0, 1.0, 0, 0],
             [0.3, 0, 0, 0, 1.0, 0, 0, 0.6, 0, 0, 0, 0, 1.0, 0, 1],
             [0.3, 0, 0, 1.0, 0, 0, 0, 0.6, 0, 0, 0, 1.0, 0, 0, 0],
             [0.6, 0, 0, 1.0, 0, 0, 0, 0.6, 0, 0, 0, 0, 0, 1.0, 0],
             [0.6, 0, 0, 0, 0, 0, 1.0, 0.3, 0, 0, 0, 0, 0, 1.0, 1],
             [0.3, 0, 0, 0, 0, 0, 1.0, 0.6, 0, 0, 0, 1.0, 0, 0, 0],
             [0.3, 0, 0, 1.0, 0, 0, 0, 0.6, 0, 0, 0, 0, 1.0, 0, 0],
             [0.6, 0, 0, 1.0, 0, 0, 0, 0.3, 1.0, 0, 0, 0, 0, 0, 1],
             [0.6, 0, 1.0, 0, 0, 0, 0, 0.3, 0, 0, 0, 1.0, 0, 0, 0],
             [0.6, 1.0, 0, 0, 0, 0, 0, 0.3, 0, 1.0, 0, 0, 0, 0, 1],
             [0.6, 0, 0, 1.0, 0, 0, 0, 0.3, 0, 0, 0, 1.0, 0, 0, 0],
             [0.6, 0, 0, 0, 1.0, 0, 0, 0.3, 0, 0, 0, 0, 1.0, 0, 1]]
    for x in range(len(cases)):
        trainingSet.append(cases[x])
        if float(x) > float(len(cases) * 0.6):
            testSet.append(cases[x])


def euclideanDistance(instance1, instance2, length, weights):
    distance = 0
    for x in range(length):
        distance += weights[x] * pow((instance1[x] - instance2[x]), 2)
    try:
        return math.sqrt(distance)
    except ValueError:
        print(distance)
        print(weights)
        sys.exit(0)


def getNeighbors(trainingSet, testInstance, k, weights):
    distances = []
    length = len(testInstance) - 1
    for x in range(len(trainingSet)):
        dist = euclideanDistance(testInstance, trainingSet[x], length, weights)
        distances.append((trainingSet[x], dist))
    distances.sort(key=operator.itemgetter(1))
    neighbors = []
    for x in range(len(distances)):
        if distances[x][1] <= k:
            neighbors.append(distances[x][0])
    if neighbors != None:
        neighbors.append(distances[0][0])
    return neighbors


def getResponse(neighbors):
    classVotes = {}
    for x in range(len(neighbors)):
        response = neighbors[x][-1]
        if response in classVotes:
            classVotes[response] += 1
        else:
            classVotes[response] = 1
    sortedVotes = sorted(classVotes.items(), key=operator.itemgetter(1), reverse=True)
    return sortedVotes[0][0]


def getAccuracy(testSet, predictions):
    correct = 0
    for x in range(len(testSet) - 1):
        if testSet[x][-1] == predictions[x]:
            correct += 1
    return (correct / float(len(testSet))) * 100.0


def specy(TrescholdValue, weights):
    # prepare data
    trainingSet = []
    testSet = []
    split = 0.67
    loadDataset(split, trainingSet, testSet)
    predictions = []
    for x in range(len(testSet)):
        neighbors = getNeighbors(trainingSet, testSet[x], TrescholdValue, weights)
        result = getResponse(neighbors)
        predictions.append(result)
    accuracy = getAccuracy(testSet, predictions)
    return accuracy


def train():
    weights = [float(1)] * 14
    TresholdValue = 0.2
    start_time = time.time()
    king = {"Epoch": 0, "Genome": weights, "Accuracy": float(specy(TresholdValue, weights))}
    speed = time.time() - start_time
    Epos = 800
    Deep = 3
    print("Number of epochs is " + str(Epos))
    print("Deepness of the analysis is " + str(Deep))
    execution_time = 1.1 * speed * Epos * Deep * int(200)
    print("Estimated execution time is " + str(datetime.timedelta(seconds=int(execution_time))))
    print("Estimated execution time for one epoch is " + str(
        datetime.timedelta(seconds=int(execution_time / 100000))))
    print("=======================================================================")
    print("Starting evolutional algorithm: ")
    bb = 0
    print("=======================================================================")
    print()
    print()
    print("Epoch num is 0")
    print("- - - - - - - - - - - - -")
    print("King is:")
    print(king)
    # Write the head of file
    filename = "kings.txt"
    with open(filename, 'a') as out:
        str1 = "Number of epochs is " + str(Epos) + "\n" + "Deepness of the analysis is " + str(Deep) + "\n" + \
               "Estimated execution time is " + str(datetime.timedelta(seconds=int(execution_time))) + "\n " + \
               "Genetic algorithms optimisation for KNN with preference weights" + "\n" + "=" * 20 + "\n"
        out.write(str1)

    # Execute GA
    genome = weights
    for epoha in range(Epos):
        organism = [king]
        for x in range(Deep):
            for k in range(100):
                new_weight = [float(i) * pow(10.0, -x) for i in [random.uniform(-1.0, 1.0) for _ in range(14)]]
                genome = [abs(float((x + y))) for x, y in zip(genome, new_weight)]
                organism.append({"Epoch": epoha, "Genome": genome, "Accuracy": float(specy(TresholdValue, genome))})
        prince = max(organism, key=lambda x: x['Accuracy'])
        if prince["Accuracy"] >= king["Accuracy"]:
            king = prince
            filename = "kings.txt"
            with open(filename, 'a') as out:
                out.write(str(king) + '\n')

        bb = 100 * epoha / Epos
        print("Percentage is: " + bb + " and accuracy is: " + str(king["Accuracy"]))
        # print(epoha)
        if king["Accuracy"] > 99.8:
            break
    print()
    print()
    print("=======================================================================")
    print()
    print()
    print("Epoch num is " + str(epoha))
    print("- - - - - - - - - - - - -")
    print("King is:")
    print(king)
    print("That is all!")
    with open(filename, 'a') as out:
        str1 = "=" * 20
        str1 = str1 + "Number of epochs is " + str(Epos) + "\n" + "Deepness of the analysis is " + str(Deep) + "\n" + \
               "Estimated execution time is " + str(datetime.timedelta(seconds=int(execution_time))) + "\n " + \
               "Genetic algorithms optimisation for KNN with preference weights" + "\n" + "The king is: \n" + str(king) \
               + "\n" + "=" * 20
        out.write(str1)
        # trainNoPref(Epos, Deep)


def trainNoPref():
    weights = [float(1)] * 14
    TresholdValue = 0.2
    start_time = time.time()
    king = {"Epoch": 0, "Genome": weights, "Accuracy": float(specy(TresholdValue, weights))}
    speed = time.time() - start_time
    Epos = 800
    Deep = 3
    print("Number of epochs is " + str(Epos))
    print("Deepness of the analysis is " + str(Deep))
    execution_time = 1.1 * speed * Epos * Deep * int(200)
    print("Estimated execution time is " + str(datetime.timedelta(seconds=int(execution_time))))
    print("Estimated execution time for one epoch is " + str(
        datetime.timedelta(seconds=int(execution_time / 100000))))
    print("=======================================================================")
    print("Starting evolutional algorithm: ")
    bb = 0
    print("=======================================================================")
    print()
    print()
    print("Epoch num is 0")
    print("- - - - - - - - - - - - -")
    print("King is:")
    print(king)
    # Write the head of file
    filename = "kings.txt"
    with open(filename, 'a') as out:
        str1 = "Number of epochs is " + str(Epos) + "\n" + "Deepness of the analysis is " + str(Deep) + "\n" + \
               "Genetic algorithms optimisation for KNN without preference weights" + "\n" + "=" * 20 + "\n"
        out.write(str1)

    # Execute GA
    genome = weights
    for epoha in range(Epos):
        organism = [king]
        for x in range(Deep):
            for k in range(100):
                new_weight = [float(i) * pow(10.0, -x) for i in [random.uniform(-1.0, 1.0) for _ in range(14)]]
                genome = [abs(float((x + y))) for x, y in zip(genome, new_weight)]
                organism.append({"Epoch": epoha, "Genome": genome, "Accuracy": float(specy(TresholdValue, genome))})
        prince = max(organism, key=lambda x: x['Accuracy'])
        if prince["Accuracy"] >= king["Accuracy"]:
            king = prince
            filename = "kings.txt"
            with open(filename, 'a') as out:
                out.write(str(king) + '\n')

        bb = 100 * epoha / Epos
        print("Percentage is: " + bb + " and accuracy is: " + str(king["Accuracy"]))
        # print(epoha)
        if king["Accuracy"] > 99.8:
            break
    print()
    print()
    print("=======================================================================")
    print()
    print()
    print("Epoch num is " + str(epoha))
    print("- - - - - - - - - - - - -")
    print("King is:")
    print(king)
    print("That is all!")
    with open(filename, 'a') as out:
        str1 = "=" * 20
        str1 = str1 + "Number of epochs is " + str(Epos) + "\n" + "Deepness of the analysis is " + str(Deep) + "\n" + \
               "Genetic algorithms optimisation for KNN without preference weights" + "\n" + "The king is: \n" + str(
            king) \
               + "\n" + "=" * 20
        out.write(str1)


trainNoPref()
